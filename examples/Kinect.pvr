<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Kinect" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="0.0274215 -0.00783468 0.019533" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-0.136387 0.000262007 1.05019" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="close" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	if hasattr(VR, 'theKinect'): VR.theKinect.join()
</core>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>

	"""
	
	install packages:
		python-freenect
		python-pyx
		cython
	
	add user to group
		sudo adduser $USER plugdev
		sudo adduser $USER video
		restart computer or logout/login
	
	"""

	import VR, sys, os
	
	kinectDir = VR.getSystemDirectory('ROOT') + '/extras/cython/Kinect'
	sys.path.append(kinectDir)
	
	import numpy as np
	from time import sleep, time
	import threading
	import freenect
	#import gc, imp

	import pyximport; pyximport.install(reload_support=True)
	import kinect_utils
	reload(kinect_utils)
	
	class mesh:
		def __init__(self):
			self.points = np.array([[]], np.float32)
			self.colors = np.array([[]], np.float32)
		
		def copy(self):
			c = mesh()
			c.points = self.points.copy()
			c.colors = self.points.copy()
			return c
		
		def addPoint(self, x,y,z,r,g,b): # to optimize
			if len(self.points[0]) == 0:
				self.points = [[x,y,z]]
				self.colors = [[r,g,b]]
			else:
				self.points = np.append( self.points, [[x,y,z]], axis=0)
				self.colors = np.append( self.colors, [[r,g,b]], axis=0)
		
	class image:
		def __init__(self):
			self.pixels = np.array([[]], np.float32)
		
		def copy(self):
			i = image()
			i.pixels = self.pixels.copy()
			return i

	class data:
		def __init__(self, name):
			self.image = image()
			self.video = image()
			self.mesh = mesh()
			self.name = name
			self.new = False
			self.newDepth = False
			self.newVideo = False
			self.time = 0
		
	def listen():
		VR.theKinect.run()
			
	class kinect:
		def __init__(self):
			print "Kinect initiated, starting thread..."
			self.data = data("Kinect")
			self.data.mesh = self.newMesh()
			self.doJoin = False
			VR.kinectThreadControl = True
			VR.kinectThread = VR.startThread(listen)
			
		def run(self):
			print 'start listen'
			self.thread = threading.Thread(target=freenect.runloop, args = (self.processDepth, self.processColor, self.body))
			self.thread.start()  # nothing after this line!
			while VR.kinectThreadControl: sleep(1)
			VR.theKinect.join()
			print 'stop listen'
		
		def newMesh(self): # create mesh for kinect data
			m = mesh()
			m.points = np.empty((480*640,3), np.float32)
			m.colors = np.ones((480*640,3), np.float32)
			for i in range(480):
				for j in range(640):				
					m.points[i*640+j][0] = (j-320)*0.01
					m.points[i*640+j][1] = (240-i)*0.01
					m.points[i*640+j][2] = -5
				
			return m
		
		def body(self, dev, ctx):
			if self.doJoin:
				raise freenect.Kill
		
		def join(self):
			VR.kinectThreadControl = False
			VR.joinThread(VR.kinectThread)
			self.doJoin = True
			self.thread.join()
			
		def processDepth(self, dev, depth, timestamp):
			if self.data.newDepth == False:
				self.data.image = depth.flatten()
				self.data.newDepth = True
				self.process()
			elif self.data.newVideo and not self.data.new:
				self.process()
				
		def processColor(self, dev, video, timestamp):
			if self.data.newVideo == False:
				self.data.video = video.flatten()
				self.data.newVideo = True
				self.process()
			elif self.data.newVideo and not self.data.new:
				self.process()
		
		def process(self):
			sleep(0.01)
			if self.data.newDepth and self.data.newVideo and self.data.new == False:
				t0 = time()
				kinect_utils.compute_kinect_pc(self.data, self.data)
				self.data.newDepth = False
				self.data.newVideo = False
				self.data.new = True
				self.data.time = time() - t0
				
		def update(self):
			if self.data.new:
				img = VR.Image(self.data.mesh.colors, 640,480,'RGB','FLOAT32')
				VR.vMat.setTexture(img)
				
				pnts = self.data.mesh.points.flatten()
				VR.visu.setPositions( pnts )
					
				self.data.new = False
				
	VR.close()
	VR.theKinect = kinect()
	
	if hasattr(VR, 'visu'): VR.visu.destroy()
	VR.vMat = VR.Material('visu')
	VR.vMat.setLit(0)
	
	if False:
		VR.visu = VR.Sprite('visu')
		VR.getRoot().find('light').addChild(VR.visu)
	
		VR.visu.setMaterial(VR.vMat)
		VR.visu.setTransform([0,0,0],[0,0,1],[0,-1,0])
		VR.visu.setSize(1.0, 480.0/640.0)
		
	if True:
		VR.visu = VR.Geometry('visu')
		VR.getRoot().find('light').addChild(VR.visu)
		
		VR.visu.setMaterial(VR.vMat)
		VR.visu.setType('GL_POINTS')
		VR.visu.setPositions( [[0,0,0]]*640*480 )
		VR.visu.setNormals( [[0,0,1]]*640*480 )
		VR.visu.setLengths( [640*480] )
		
		tcs = []
		for i in range(480):
			for j in range(640):
				tcs.append([j*1.0/640, i*1.0/480])
				
		print tcs[0], tcs[1], tcs[639+479*640]
		VR.visu.setTexCoords( tcs )
	
				
				
				
				
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="updateSprite" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import numpy as np
	
	#print ' kinect update'	
	if hasattr(VR, 'theKinect'): VR.theKinect.update()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
