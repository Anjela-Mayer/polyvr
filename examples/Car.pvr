<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Car" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object at="-0.5 -1 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="0.501976 1.90785 -0.283368" at_dir="0" base_name="Default" far="512" fov="1.0472" from="19.6145 18.4193 54.7683" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="carCnfLoad" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	p = VR.ProjectManager()
	p.setPersistencyLevel(-1)
	p.addItem(VR.car, 'RELOAD')
	p.load('car.cnf')
</core>
    </Script>
    <Script base_name="carCnfStore" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	p = VR.ProjectManager()
	p.setPersistencyLevel(-1)
	p.addItem(VR.car, 'RELOAD')
	p.save('car.cnf')
</core>
    </Script>
    <Script base_name="ignite" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.car.setIgnition( not VR.car.isRunning() )
	print 'running: ', VR.car.isRunning()
	
</core>
      <trig type="on_device" dev="keyboard" state="Released" param="" key="101" base_name="trigger" name_space="__global__" name_suffix="3" persistency="666"/>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	from math import pi
	
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene')
	VR.find('light').addChild(VR.scene)
	
	# ground
	ground = VR.Geometry('ground')
	ground.setPrimitive('Box 100 1 100 100 1 100')
	VR.scene.addChild(ground)
	ground.physicalize(True, False, 'Convex')
	brown = VR.Material('brown')
	brown.setDiffuse([0.5,0.4,0])
	brown.setWireFrame(True)
	ground.setMaterial(brown)
	
	# car
	VR.car = VR.CarDynamics('car')
	VR.scene.addChild(VR.car)
	
	# chassis
	chassis = VR.Geometry('chassis')
	chassis.setPrimitive('Box 1 2 3 1 1 1')
	VR.car.setChassis(chassis, True)
	green = VR.Material('green')
	green.setDiffuse([0,1,0])
	chassis.setMaterial(green)
	
	# wheel
	wheel = VR.Geometry('wheel')
	wheel.setPrimitive('Cylinder 0.17 0.29 64 1 1 1')
	wheel.rotate(0.5*pi, [0,0,1])
	wheel.applyTransformation()
	VR.car.setupSimpleWheels( wheel, 0.667,1.01,-0.9,-0.5, 0.29, 0.17, 0.5)
	blue = VR.Material('blue')
	blue.setDiffuse([0,0,1])
	wheel.setMaterial(blue)
	
	# mass, max_steering, enginePower, breakPower, massOffset
	VR.car.setParameter(1000, 500, 100, [0,-1,0])
	VR.reset(None)
	
	
	
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="keynav" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if not hasattr(VR, 'car_steering'): return
	
	dev = VR.find('keyboard')
	
	def isPressed(k):
		s = dev.getKeyState( ord(k) )
		return s == 1
		
	W = isPressed('w')
	A = isPressed('a')
	S = isPressed('s')
	D = isPressed('d')
	X = isPressed('x')
	if not True in [W,A,S,D,X]: return
	
	VR.car_clutch = 0
	VR.car_throttle = 0
	VR.car_break = 0
	VR.car_gear_lever = 'D'
	
	if X: 
		speed = VR.car.getSpeed()
		if VR.car_gear != -1 and abs(speed) &lt; 5: VR.car_gear = -1
		if VR.car_gear == -1:
			VR.car_throttle = 0.3
			VR.car_gear_lever = 'R'
			
	if W:
		speed = VR.car.getSpeed()
		if VR.car_gear == -1 and abs(speed) &lt; 5: VR.car_gear = 1
		if VR.car_gear != -1:
			VR.car_gear_lever = 'D'
			VR.car_throttle = 0.3
			VR.car_gear = 1
	if S: 
		VR.car_break = 1
		VR.car_throttle = 0
	if A and VR.car_steering &lt; 1.0: VR.car_steering += 0.05
	if D and VR.car_steering &gt; -1.0: VR.car_steering -= 0.05
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="6" persistency="666"/>
    </Script>
    <Script base_name="reset" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.car_speed = 0
	#lever gear R , N , D
	VR.car_gear_lever = 'D'
	#gear 0-5
	VR.car_gear = 1
	VR.car_gear_mode_push = 0
	VR.car_gear_push = 0
	#if automtik in drive
	VR.car_gear_auto = 0

	VR.car_speed = 0
	VR.car_rpm = 0
	VR.car_break = 0
	VR.car_throttle = 0
	VR.car_steering = 0
	VR.car_clutch = 0
	VR.turn_right_signal = 0
	VR.turn_left_signal = 0
	VR.safety_belt = 0
	
	VR.car.reset( VR.Pose([0,2,0], [0,0,-1], [0,1,0]) )
	
	# balance test
	#VR.car.setParameter(1000, 1.0, 500, 100, [0,-1,-0.89])
	#VR.car.reset( VR.Pose([0,2,48], [0,0,-1], [0,1,0]) )
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="114" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="simulation" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if not hasattr(VR, 'car_throttle'): return
	if not hasattr(VR, 'car_gear'): return
	
	c = VR.car_clutch
	t = VR.car_throttle
	s = VR.car_steering
	b = VR.car_break
	l = VR.car_gear_lever
	g = VR.car_gear
	
	VR.car.update(t, b, s, c, g)
	
	if VR.car_gear_auto:
		rpm = VR.car.getRPM()
		g = VR.car_gear
		if rpm &lt; 1000 and g &gt; 1: VR.car_gear -= 1
		if rpm &gt; 3800 and g &lt; 5 and g &gt; 0: VR.car_gear += 1

</core>
      <trig type="on_timeout" dev="" state="Pressed" param="10" key="0" base_name="trigger" name_space="__global__" name_suffix="9" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
