<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="cylindertest" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="0.294688 0.787463 -0.0876844" at_dir="0" base_name="Default" far="250" fov="1.0472" from="2.56709 4.3126 -0.0401191" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="Script" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'testmat'): VR.testmat.destroy()
	VR.testmat = VR.Object('testmat')
	l = VR.getRoot().find('Headlight')
	l.addChild(VR.testmat)
	
	m = VR.Material('test')
	m.setDiffuse(1,0,0)
	VR.testmat.addChild(m)
	
	ms = VR.Material('test2')
	#ms.setVertexProgram('particle_vp')
	#ms.setFragmentProgram('particle_fp')
	#ms.setGeometryProgram('particle_gp')
	
	g = VR.Sprite('stest')
	g.setSize(4,4)
	g.setMaterial(ms)
	
	#m.addChild(g)
	m.addLink(g)
	VR.testmat.addChild(g)
</core>
    </Script>
    <Script base_name="doBasin" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
		
	def doColor(r,g,b):
		mat = VR.Material('color')
		mat.setDiffuse([r,g,b])
		mat.setAmbient([r,g,b])
		return mat
		
	def doLittleCube():
		cube = VR.Geometry('lilCube')
		cube.setPrimitive("Box 0.01 0.01 0.01 1 1 1")
		parent.addChild(cube)
		return cube
		
	(x,y,z) = ("4.2","0.2","2")
	(nx,ny,nz) = (2,0.1,1) #as integer, halved
	VR.basin = []
	
	#---do ground---#
	ground = VR.Geometry('Ground')
	ground.setPrimitive("Box "+x+" "+y+" "+z+" 1 1 1")
	ground.setCollisionMargin(0.1)
	ground.physicalize(1,0,'Convex')
	ground.setMaterial(doColor(0.8,0.8,0.9))
	ground.setCollisionGroup(2) # gruppe 1
	ground.setCollisionMask(1) # kollidiert mit boden, gruppe 2
	VR.basin.append(ground)
	parent.addChild(ground)
	
	
	#---do walls----#
	def newWall(a,b,c, tx, ty, tz):
		wall = VR.Geometry('Wall')
		wall.setPrimitive("Box "+a+" "+b+" "+c+" 1 1 1")
		wall.translate([tx,ty,tz])
		wall.hide()
		wall.setCollisionMargin(0.1)
		wall.physicalize(1,0,'Convex')
		parent.addChild(wall)
		VR.basin.append(wall)
		
	newWall(y,z,z, -nx,nz,0)
	newWall(y,z,z,  nx,nz,0)
	newWall(x,z,y,  0,nz, nz)
	newWall(x,z,y,  0,nz,-nz)
	#------------------#
	
	
	#---do cylinder---#
	cylinder = VR.Geometry('cylinder')
	cylinder.setPrimitive("Cone "+z+" 1 16")
	cylinder.translate([-0.2,0.2,0])
	cylinder.setCollisionMargin(0.01)
	cylinder.physicalize(1,0,'Convex')
	cylinder.setMaterial(doColor(0.8,0.8,0.9))
	parent.addChild(cylinder)
	VR.basin.append(cylinder)
	
	
	# do path
	path = VR.Path('cyl_path')
	path.set([-nz,nz,0], [1,0,0], [nz,nz,0], [1,0,0], 2)
	# animate cylinder
	pathtool = VR.Pathtool('pathtool')
	pathtool.setVisible(False)
	pathtool.setHandleGeometry(doLittleCube())
	pathtool.addPath(path, parent)
	
	n = pathtool.extrude(None, path)
	n.setTransform([-nz,nz,0], [1,0,0], [0,1,0])
	pathtool.update()
	cylinder.animate(path, 2, 0,0,1)
	
	# let them collide with water
	for o in VR.basin:
		o.setCollisionGroup(0) # 0001 = BIT(0)
		o.setCollisionMask(1) #  0010 = BIT(1)
	
	return cylinder
</core>
      <arg type="VRPyObjectType" value="0" base_name="parent" name_space="doBasin" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="doFluids" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# TODO resize stage with viewport
	
	def doMaterial():
		m = VR.Material('fluid')
		
		"""
		m.setLit(0)
		m.setVertexProgram('particle_vp')
		m.setFragmentProgram('particle_opaque_fp')
		m.setGeometryProgram('particle_gp')
		m.setDepthTest('GL_ALWAYS')
		m.addPass()
		"""
		
		m.setLit(0)
		m.setVertexProgram('particle_vp')
		m.setFragmentProgram('particle_fp')
		m.setGeometryProgram('particle_gp')
		m.enableTransparency()
		m.setDepthTest('GL_ALWAYS')
		return m	
		
	meta = VR.MetaBalls('water')
	parent.addChild(meta)
	m = meta.getMaterial()
	m.setVertexProgram('water_vp')
	m.setFragmentProgram('water_fp')
	m.setShaderParameter('texWater', 0)
	m.setShaderParameter('texDepth', 1)
	
	dmat = meta.getDepthMaterial()
	dmat.setVertexProgram('particle_vp')
	dmat.setFragmentProgram('particle_depth_fp')
	dmat.setGeometryProgram('particle_gp')	
	
	fluid = VR.Fluids()
	#fluid.setAmount(800)
	fluid.setMaterial( doMaterial() )
	fluid.setRadius(radius)
	fluid.setMass(mass)
	fluid.setSphRadius(sphRadius)
	fluid.setViscosity(0.001)
	#VR.fluid.setSimType('SPH')
	#num = fluid.spawnCuboid(-1,5,-0.4, 4*sphRadius, 3,800,2)
	#print num
	fluid.spawnEmitter([0,5,-0.4],[0.2,0.1,0],0,400,20)
	meta.addChild(fluid)

	
	
	
	
	
</core>
      <arg type="float" value="0" base_name="mass" name_space="doFluids" name_suffix="0" persistency="666"/>
      <arg type="VRPyObjectType" value="0" base_name="parent" name_space="doFluids" name_suffix="0" persistency="666"/>
      <arg type="float" value="0" base_name="radius" name_space="doFluids" name_suffix="0" persistency="666"/>
      <arg type="float" value="0" base_name="sphRadius" name_space="doFluids" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import time
	import math
	
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'Headlight')
	
	VR.cylinder = VR.doBasin(VR.scene)

	R = 0.05 # meter radius
	V = 4/3*math.pi*R*R*R # Volumen pro partikel
	rho = 1000 # kg f√ºr einen m^3 fluid
	m = V*rho
	
	(mass, parent, radius, sphRadius) = (m, VR.scene, R, 5*R)
	VR.doFluids(mass, parent, radius, sphRadius)
	VR.play = True;
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="105" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="particle_depth_fp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

varying vec4 Color;
varying vec2 texCoord;
varying vec4 pos;

void main( void ) {
	vec4 c = vec4(1);
	c.x = pos.z/pos.w;
	c.x = c.x*0.5 + 0.5;
	gl_FragColor = c;
}
</core>
    </Script>
    <Script base_name="particle_fp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

varying vec4 Color;
varying vec2 texCoord;
varying vec4 pos;
&#13;
#define mP gl_ProjectionMatrix

void computeDepth() {&#13;
	vec4 pp = mP * pos;
	//vec4 pp = pos;&#13;
	float d = pp.z / pp.w;&#13;
	gl_FragDepth = d*0.5 + 0.5;&#13;
}

void main( void ) {
	vec4 c = vec4(0.0);	
	float r = sqrt(texCoord[0]*texCoord[0]+texCoord[1]*texCoord[1]);
	c.a = max(1.0-r,0.0)*0.3;
	gl_FragColor = c;
	computeDepth();
}
</core>
    </Script>
    <Script base_name="particle_gp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 150
#extension GL_EXT_geometry_shader4 : enable

layout (points) in;
layout (triangle_strip, max_vertices=6) out;

uniform vec2 OSGViewportSize;

in vec4 color[];
//in vec3 normal[];
out vec2 texCoord;
out vec4 Color;
out vec4 pos;

void emitVertex(in vec4 p, in vec2 tc) {
	gl_Position = p;
	pos = p;
	texCoord = tc;
	EmitVertex();
}

void emitQuad(in float s, in vec4 tc) {
	vec4 p = gl_PositionIn[0];

	float a = OSGViewportSize.y/OSGViewportSize.x;

	vec4 u = vec4(s*a,0,0,0);
	vec4 v = vec4(0,s,0,0);

	vec4 p1 = p -u -v;
	vec4 p2 = p -u +v;
	vec4 p3 = p +u +v;
	vec4 p4 = p +u -v;

	emitVertex(p1, vec2(tc[0], tc[2]));
	emitVertex(p2, vec2(tc[0], tc[3]));
	emitVertex(p3, vec2(tc[1], tc[3]));
	EndPrimitive();
	emitVertex(p1, vec2(tc[0], tc[2]));
	emitVertex(p3, vec2(tc[1], tc[3]));
	emitVertex(p4, vec2(tc[1], tc[2]));
	EndPrimitive();
}

void main() {
	Color = color[0];
	emitQuad(0.3, vec4(-1,1,-1,1));
}
</core>
    </Script>
    <Script base_name="particle_opaque_fp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

varying vec4 Color;
varying vec2 texCoord;
varying vec4 pos;
&#13;
#define mP gl_ProjectionMatrix

void computeDepth() {&#13;
	vec4 pp = mP * pos;
	//vec4 pp = pos;&#13;
	float d = pp.z / pp.w;&#13;
	gl_FragDepth = d*0.5 + 0.5;&#13;
}

void main( void ) {
	vec4 c = vec4(1.0);	
	gl_FragColor = c;
	computeDepth();
}
</core>
    </Script>
    <Script base_name="particle_vp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

attribute vec4 osg_Vertex;
attribute vec4 osg_Color;

varying vec4 color;

void main(void) {
    gl_Position = gl_ModelViewProjectionMatrix*osg_Vertex;
    color = osg_Color;
}
</core>
    </Script>
    <Script base_name="playPause" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if VR.play == True:
		VR.cylinder.animationStop()
		VR.play = False
	else:
		print "not implemented yet"
		

</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="112" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
    <Script base_name="water_fp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

uniform sampler2D texWater;
uniform sampler2D texDepth;

void main(void) { 
    vec2 tc = gl_TexCoord[0].xy;
    
    vec4 water = texture2D(texWater, tc);
    vec4 depth = texture2D(texDepth, tc);
    
	float R = water.a;
	if (R &gt; 0.84) discard;
	gl_FragDepth = depth.x;//depth.y;
	
	
    
    //if (tc.x &lt; 0.5) gl_FragColor = depth;
    //else 
    gl_FragColor = vec4(0.1+0.7*R,0.3+0.7*R,1.0,1.0);
}
</core>
    </Script>
    <Script base_name="water_fp2" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

#extension GL_ARB_texture_rectangle : require
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect texBufPos;
uniform sampler2DRect texBufNorm;
uniform sampler2DRect texBufDiff;
uniform sampler2D texWater;

void main(void) {
    vec2 lookup = gl_FragCoord.xy;
    vec4 posAmb = texture2DRect(texBufPos,  lookup);
    vec4 norm   = texture2DRect(texBufNorm, lookup);
    vec4 mDiff  = texture2DRect(texBufDiff, lookup);
    
    vec2 tc = gl_TexCoord[0].xy;
    vec4 water = texture2D(texWater, tc);
    float r = water.a;
    if (r &lt; 0.9) {
		water.rgb *= r;
    
		mDiff.rgb *= water.rgb;
    }

    gl_FragData[0] = posAmb;
    gl_FragData[1] = norm;
    gl_FragData[2] = mDiff;
}
</core>
    </Script>
    <Script base_name="water_vp" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

attribute vec4 osg_Vertex;
attribute vec2 osg_MultiTexCoord0;

void main(void) {
    gl_Position = osg_Vertex;
    gl_Position.z = -1.0;
    gl_TexCoord[0] = vec4(osg_MultiTexCoord0,0.0,0.0);
}
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.749996 0.749996 0.749996" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
