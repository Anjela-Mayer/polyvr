<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="LocalShadows" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object accept_root="1" aspect="1" at="0.556796 0.5 -0.395505" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-4.59844 5.66713 4.21549" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
        <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
        <constraint persistency="666"/>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'Root')
	
	light = VR.Light('sun')
	VR.scene.addChild(light)
	beacon = VR.LightBeacon('sunBeacon', light.getName())
	light.setBeacon(beacon)
	beacon.setTransform([0,10,0], [0, -1, -0.5], [1,0,0])
	
	VR.ground = VR.Geometry('ground', light.getName())
	VR.ground.setPrimitive('Box 100 1 100 1 1 1')
	
	X = 2
	bb = VR.Boundingbox()
	bb.update([-X,-X,-X])
	bb.update([X,X,X])
	light.setVolume(bb) # comment to see the difference
	
	gear = VR.Geometry('gear', light.getName())
	gear.setPrimitive('Gear 0.1 0.1 0.01 121 0.03 0.2')
	
	def addGear(x,y):
		g = gear.duplicate()
		g.setFrom([x,2,y])
		light.addChild(g)
		return g
		
	
	g = addGear(0,0)
	
	#for x in [-4,-2,0,2,4]:
	#	for y in [-4,-2,0,2,4]:
	#		g = addGear(x,y)
	
	
	light.setType('point')
	light.setShadowParams(True, 2048, [1,1,1,1])
	
	m = VR.Material('test')
	m.setVertexProgram('shadowVP')
	m.setFragmentProgram('shadowFP')
	#for geo in light.getChildren(True, 'Geometry'):
	#	geo.setMaterial(m)
		
		
		
		
		
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="shadowFP" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
varying vec3 N;
varying vec3 v;

void main (void) {
	vec3 L = normalize(gl_LightSource[0].position.xyz); // directional light
  	vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)
  	vec3 R = normalize(-reflect(L,N));

 	vec4 Iamb = vec4(0.3,0.3,0.3,1.0);
   	vec4 Idiff = vec4(0.8,0.8,0.8,1.0) * max(dot(N,L), 0.0);
 	vec4 Ispec = vec4(0.5,0.5,0.5,1.0) * pow(max(dot(R,E),0.0), 0.3);
	gl_FragColor = Iamb + Idiff + Ispec;
}

</core>
    </Script>
    <Script base_name="shadowVP" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
varying vec3 N;
varying vec3 v;

attribute vec4 osg_Vertex;
attribute vec3 osg_Normal;

void main(void) {
   v = vec3(gl_ModelViewMatrix * osg_Vertex);
   N = normalize(gl_NormalMatrix * osg_Normal);
   gl_Position = gl_ModelViewProjectionMatrix * osg_Vertex;
}
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
