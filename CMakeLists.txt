cmake_minimum_required (VERSION 3.0)

project(PolyVR)

message( "Configuring for system name / version: " ${CMAKE_SYSTEM_NAME} " / " ${CMAKE_SYSTEM_VERSION} )

#-s WASM=1 -s USE_ZLIB=1 -lz
#-s USE_BOOST_HEADERS=1
  
add_definitions( -DWASM=1 )
add_definitions( -DGLUT_glut_LIBRARY=1 )
add_definitions( -DGLUT_Xi_LIBRARY=1 )
add_definitions( -DGLUT_Xmu_LIBRARY=1 )
add_definitions( -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake )
add_definitions( -DCMAKE_MODULE_PATH=../emsdk/upstream/emscripten/cmake/Modules )

add_definitions( -D__USE_MISC=1 )


function(FIND_ZLIB)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(ZLIB_INCLUDE_DIR "~/.emscripten_ports/zlib/zlib-version_1")
		set(ZLIB_LIBRARY_DIR "~/.emscripten_cache/wasm-obj/")
		set(ZLIB_LIBRARIES "-lz")
		set(LINKER_FLAGS "${LINKER_FLAGS} ${ZLIB_LIBRARIES}" PARENT_SCOPE)
	endif()
	include_directories(${ZLIB_INCLUDE_DIR})
	link_directories(${ZLIB_LIBRARY_DIR})
endfunction()

function(FIND_LIBXML)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(LIBXML_INCLUDE_DIR "../include/libxml2")
		set(LIBXML_LIBRARY_DIR "../lib")
		set(LIBXML_LIBRARIES "-lxml2")
		set(LINKER_FLAGS "${LINKER_FLAGS} ${LIBXML_LIBRARIES}" PARENT_SCOPE)
	endif()
	include_directories(${LIBXML_INCLUDE_DIR})
	link_directories(${LIBXML_LIBRARY_DIR})
endfunction()

function(FIND_BOOST)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(BOOST_INCLUDE_DIR "~/.emscripten_ports/boost_headers")
		set(BOOST_LIBRARY_DIR "../lib")
		#set(BOOST_LIBRARIES "-lboost_system -lboost_thread -lboost_program_options -lboost_serialization -lboost_filesystem -lboost_regex")
		set(BOOST_LIBRARIES "-lboost_system -lboost_program_options -lboost_serialization -lboost_filesystem")
		set(LINKER_FLAGS "${LINKER_FLAGS} ${BOOST_LIBRARIES}" PARENT_SCOPE)
	endif()
	include_directories(${BOOST_INCLUDE_DIR})
endfunction()

function(FIND_PYTHON)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(PYTHON_INCLUDE_DIR "../include/Python")
		set(PYTHON_LIBRARY_DIR "../lib")
		set(PYTHON_LIBRARIES "-lpython2.7")
	endif()
	include_directories(${PYTHON_INCLUDE_DIR})
endfunction()

function(FIND_GLUT)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(GLUT_INCLUDE_DIR "")
		set(GLUT_LIBRARY_DIR "")
		set(GLUT_LIBRARIES "-lGL -lglut")
	endif()
	include_directories(${GLUT_INCLUDE_DIR})
endfunction()

function(FIND_OPENSG)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(OPENSG_INCLUDE_DIR "../include")
		set(OPENSG_LIBRARY_DIR "../lib")
		set(OPENSG_LIBRARIES "-lOSGWindowGLUT -lOSGWindowWASM -lOSGWindow -lOSGSystem -lOSGUtil -lOSGDrawable -lOSGGroup -lOSGState -lOSGBase")
		set(LINKER_FLAGS "${LINKER_FLAGS} ${OPENSG_LIBRARIES}" PARENT_SCOPE)
	endif()
	include_directories(${OPENSG_INCLUDE_DIR})
	link_directories(${OPENSG_LIBRARY_DIR})
endfunction()

function(SETUP_VARS)
	if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		add_definitions( -DWITHOUT_BULLET )
		add_definitions( -DWITHOUT_GTK )
		add_definitions( -DWITHOUT_EXECINFO )
		add_definitions( -DWITHOUT_CRYPTOPP )
		add_definitions( -DWITHOUT_VRPN )
	endif()
endfunction()

FIND_ZLIB()
FIND_LIBXML()
FIND_BOOST()
FIND_PYTHON()
FIND_GLUT()
FIND_OPENSG()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

SETUP_VARS()
string(STRIP ${LINKER_FLAGS} LINKER_FLAGS)

include_directories(src)

add_executable(polyvr src/main.cpp)
target_sources(polyvr PRIVATE src/PolyVR.cpp)

target_sources(polyvr PRIVATE src/core/utils/system/VRSystem.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi_buf.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi_mem.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/unzip.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/zip.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/filesystem.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/tools.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/unzipper.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/zipper.cpp)
target_sources(polyvr PRIVATE src/core/utils/coreDumpHandler.cpp)
target_sources(polyvr PRIVATE src/core/utils/isNan.cpp)
target_sources(polyvr PRIVATE src/core/utils/toString.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRCallbackWrapper.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRChangeList.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRDoublebuffer.cpp)
#target_sources(polyvr PRIVATE src/core/utils/VREncryption.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRFlags.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRFunction.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRGlobals.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRInternalMonitor.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRLogger.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRManager.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRName.cpp)
target_sources(polyvr PRIVATE src/core/utils/VROptions.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRProfiler.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRProgress.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRRate.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRStorage.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRTests.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRTimer.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRUndoInterface.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRVisualLayer.cpp)

target_compile_options(polyvr PRIVATE ${COMPILER_FLAGS})
target_link_libraries(polyvr PRIVATE ${LINKER_FLAGS})







