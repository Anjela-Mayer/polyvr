<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Ontology" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="2" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="1" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object at="-0.5 -1 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <Object base_name="None" name_space="__global__" name_suffix="3" persistency="666" pickable="0" type="Object" visible="1"/>
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="-0.378234 0.0500002 0.122089" at_dir="0" base_name="Default" far="512" fov="1.0472" from="6.1126 5.78482 -2.54972" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <Object base_name="None" name_space="__global__" name_suffix="4" persistency="666" pickable="0" type="Object" visible="1"/>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="classify" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# classify scene objects as semantic entities by name
	#  name convention: 'Concept:name'
	
	for o in scene.getChildren(True):
		n = o.getName()
		if not ':' in n: continue
		concept, name = n.split(':')
		print concept, name
		
		e = onto.addEntity(name, concept)
		o.setEntity(e)
		
		e.setVector('orientation', [1,0,0,0], 'Orientation')
		e.setVector('position', o.getFrom(), 'Position')
		
		if concept == 'Table':
			if o.getFrom()[0] &lt; 0: e.set('state','reserved')
			else: e.set('state','free')
		
		#print e.toString()
			
			
	#print onto.toString()
</core>
      <arg type="NoneType" value="None" base_name="onto" name_space="classify" name_suffix="0" persistency="666"/>
      <arg type="NoneType" value="None" base_name="scene" name_space="classify" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	def buildOntology():
		# build simple knowledge base
		VR.knowledge = VR.Ontology('Furniture') # create a new ontology for the furniture domain
		VR.knowledge.addModule('Math') # add the Object module, will automatically add modules like transform, geometry and math
		VR.knowledge.addModule('Object') # add the Object module, will automatically add modules like transform, geometry and math
	
		VR.knowledge.addConcept('Furniture', 'Object', {'':''})
		VR.knowledge.addConcept('Chair', 'Furniture')
		table = VR.knowledge.addConcept('Table', 'Furniture')
		table.addProperty('state', 'string')
		
		#VR.knowledge.addRule('has(t,c):Table(t);Chair(c);isLessOrEqual(distance(t.position,c.position),1.5)')
		VR.knowledge.addRule('isReserved(t):Table(t);is(t.state,reserved)')
	
	# build simple scene
	def buildScene():
		if hasattr(VR, 'scene'): VR.scene.destroy()
		VR.scene = VR.Object('scene')
		VR.find('light').addChild(VR.scene)
		
		brown = VR.Material('brown')
		brown.setDiffuse(0.6,0.5,0.1)
	
		ground = VR.Geometry('ground')
		ground.setPrimitive('Box 10 0.1 10 1 1 1')
		ground.setMaterial(brown)
		VR.scene.addChild(ground)
			
		def addTable(p):
			table = VR.Geometry('Table:table')
			table.setPrimitive('Box 1 1 1 1 1 1')
			table.translate([0,0.5,0])
			table.applyTransformation()
			table.setFrom(p)
			VR.scene.addChild(table)
			
		def addChair(p):
			chair = VR.Geometry('Chair:chair')
			chair.setPrimitive('Box 0.5 0.5 0.5 1 1 1')
			chair.translate([0,0.25,0])
			chair.applyTransformation()
			chair.setFrom(p)
			VR.scene.addChild(chair)
		
		for i in [-2,2]:	
			for j in [-2,2]:	
				addTable([i,0,j])
				
		for i in [-3,-1,1,3]:	
			for j in [-2,2]:	
				addChair([i,0,j])
				addChair([j,0,i])
		
	
	buildScene()
	buildOntology()
	
	VR.classify(VR.knowledge, VR.scene)
	VR.testQueries()
	
	
	
	
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="105" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="testQueries" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	r = VR.Reasoner()
	
	print '\nquery furniture'
	q1 = 'q(x):Furniture(x)'
	res = r.process(q1, VR.knowledge)
	for f in res: print f.toString()
	
	print '\nquery free tables by state'
	q1 = 'q(x):Table(x);is(x.state,free)'
	res = r.process(q1, VR.knowledge)
	for f in res: print f.toString()
	
	print '\nquery reserved tables using rules'
	q1 = 'q(x):Table(x);isReserved(x)'
	res = r.process(q1, VR.knowledge)
	for f in res: print f.toString()
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.983978 1 0.812222" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666">
    <Ontology base_name="Test" flag="custom" name_space="Ontology" name_suffix="0" persistency="666">
      <Thing base_name="Thing" name_space="concept" name_suffix="0" persistency="666"/>
    </Ontology>
    <Ontology base_name="new_concept_1" flag="custom" name_space="Ontology" name_suffix="0" persistency="666">
      <Thing base_name="Thing" name_space="concept" name_suffix="0" persistency="666"/>
    </Ontology>
  </Semantics>
</Scene>
